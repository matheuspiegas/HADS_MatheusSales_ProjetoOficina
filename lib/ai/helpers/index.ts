/**
 * Analisa uma string de per√≠odo em linguagem natural e a converte em um objeto com datas de in√≠cio e/alvo.
 * A fun√ß√£o √© projetada para ser flex√≠vel e entender uma variedade de formatos de data comuns em portugu√™s.
 *
 * @param {string} period - A string de per√≠odo em linguagem natural a ser analisada. A an√°lise n√£o diferencia mai√∫sculas de min√∫sculas.
 * @returns {{ start?: string; end?: string }} Um objeto contendo as datas de in√≠cio (`start`) e/ou fim (`end`) como strings no formato ISO.
 * Se a string do per√≠odo n√£o for reconhecida, um objeto vazio √© retornado e um aviso √© logado no console.
 *
 * @example
 * // Retorna o in√≠cio de 5 dias atr√°s at√© agora
 * parsePeriod("√∫ltimos 5 dias");
 *
 * @example
 * // Retorna o in√≠cio e o fim do dia de ontem
 * parsePeriod("ontem");
 *
 * @example
 * // Retorna o in√≠cio e o fim do m√™s de Janeiro do ano corrente
 * parsePeriod("janeiro");
 *
 * @example
 * // Retorna o in√≠cio e o fim do m√™s de Fevereiro de 2023
 * parsePeriod("fevereiro de 2023");
 *
 * @example
 * // Retorna o in√≠cio e o fim do ano de 2024
 * parsePeriod("ano de 2024");
 *
 * @description
 * A fun√ß√£o processa a string de entrada atrav√©s de uma s√©rie de estrat√©gias e padr√µes:
 *
 * 1. **Padr√µes Num√©ricos ("√∫ltimos X ..."):**
 *    - **"√∫ltimos X dias"**: Calcula a data de in√≠cio `X` dias antes da data atual. O `end` n√£o √© definido.
 *      Ex: `parsePeriod("√∫ltimos 7 dias")`
 *    - **"√∫ltimos X meses"**: Calcula a data de in√≠cio `X` meses antes da data atual. O `end` n√£o √© definido.
 *      Ex: `parsePeriod("√∫ltimos 2 meses")`
 *    - **"√∫ltimos X anos"**: Calcula a data de in√≠cio `X` anos antes da data atual. O `end` n√£o √© definido.
 *      Ex: `parsePeriod("√∫ltimo ano")` (funciona para "1 ano")
 *
 * 2. **Casos Especiais Comuns:**
 *    - **"hoje"**: Define `start` para o in√≠cio do dia atual (00:00:00). `end` n√£o √© definido.
 *    - **"ontem"**: Define `start` para o in√≠cio de ontem (00:00:00) e `end` para o final de ontem (23:59:59.999).
 *    - **"esta semana" / "dessa semana"**: Define `start` para o in√≠cio do primeiro dia (Domingo) da semana atual. `end` n√£o √© definido.
 *
 * 3. **Padr√µes de M√™s:**
 *    - **"este m√™s" / "deste m√™s"**: Define `start` para o primeiro dia do m√™s atual. `end` n√£o √© definido.
 *    - **"m√™s passado" / "√∫ltimo m√™s"**: Define `start` para o primeiro dia do m√™s anterior e `end` para o √∫ltimo dia do m√™s anterior.
 *
 * 4. **Nomes de Meses Espec√≠ficos:**
 *    - Procura por nomes de meses (ex: "janeiro", "fevereiro").
 *    - Se um ano de 4 d√≠gitos for encontrado na string (ex: "janeiro de 2023"), esse ano √© usado.
 *    - Se nenhum ano for encontrado, o ano atual √© assumido.
 *    - Define `start` para o primeiro dia do m√™s/ano e `end` para o √∫ltimo dia do mesmo.
 *
 * 5. **Ano Espec√≠fico:**
 *    - Procura por um ano de 4 d√≠gitos (come√ßando com "202", ex: "2024").
 *    - Define `start` para o primeiro dia do ano (1 de Janeiro) and `end` para o √∫ltimo dia do ano (31 de Dezembro).
 *
 * 6. **Fallback (Nenhum Padr√£o Reconhecido):**
 *    - Se a string `period` n√£o corresponder a nenhum dos padr√µes acima, a fun√ß√£o loga um aviso no console.
 *    - Retorna um objeto vazio `{}`, indicando que nenhum filtro de data deve ser aplicado.
 */
export function parsePeriod(period: string): { start?: string; end?: string } {
  const now = new Date();
  const periodLower = period.toLowerCase().trim();

  // üî• ESTRAT√âGIA: Tentar extrair N√öMEROS primeiro (mais flex√≠vel)

  // 1Ô∏è‚É£ Padr√£o: "√∫ltimos X dias/meses/anos"
  const daysMatch = periodLower.match(/√∫ltimos?\s+(\d+)\s+dias?/);
  if (daysMatch) {
    const days = parseInt(daysMatch[1]);
    const startDate = new Date(now);
    startDate.setDate(startDate.getDate() - days);
    return {
      start: startDate.toISOString().split("T")[0], // YYYY-MM-DD
      end: undefined,
    };
  }

  const monthsMatch = periodLower.match(/√∫ltimos?\s+(\d+)\s+mes(?:es)?/);
  if (monthsMatch) {
    const months = parseInt(monthsMatch[1]);
    const startDate = new Date(
      now.getFullYear(),
      now.getMonth() - months,
      now.getDate(),
    );
    return {
      start: startDate.toISOString().split("T")[0], // YYYY-MM-DD
      end: undefined,
    };
  }

  const yearsMatch = periodLower.match(/√∫ltimos?\s+(\d+)\s+anos?/);
  if (yearsMatch) {
    const years = parseInt(yearsMatch[1]);
    const startDate = new Date(
      now.getFullYear() - years,
      now.getMonth(),
      now.getDate(),
    );
    return {
      start: startDate.toISOString().split("T")[0], // YYYY-MM-DD
      end: undefined,
    };
  }

  // 2Ô∏è‚É£ Casos especiais comuns
  if (periodLower.includes("hoje")) {
    return {
      start: now.toISOString().split("T")[0], // YYYY-MM-DD
      end: undefined,
    };
  }

  if (periodLower.includes("ontem")) {
    const yesterday = new Date(now);
    yesterday.setDate(yesterday.getDate() - 1);
    const yesterdayDate = yesterday.toISOString().split("T")[0];
    return {
      start: yesterdayDate,
      end: yesterdayDate,
    };
  }

  if (
    periodLower.includes("esta semana") ||
    periodLower.includes("dessa semana")
  ) {
    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - now.getDay());
    return {
      start: startOfWeek.toISOString().split("T")[0], // YYYY-MM-DD
      end: undefined,
    };
  }

  // 3Ô∏è‚É£ Padr√µes de m√™s
  if (periodLower.includes("este m√™s") || periodLower.includes("deste m√™s")) {
    return {
      start: new Date(now.getFullYear(), now.getMonth(), 1).toISOString(),
      end: undefined,
    };
  }

  if (
    periodLower.includes("m√™s passado") ||
    periodLower.includes("√∫ltimo m√™s")
  ) {
    const startDate = new Date(
      Date.UTC(now.getFullYear(), now.getMonth() - 1, 1),
    );
    const endDate = new Date(Date.UTC(now.getFullYear(), now.getMonth(), 0));

    return {
      start: startDate.toISOString().split("T")[0], // YYYY-MM-DD
      end: endDate.toISOString().split("T")[0], // YYYY-MM-DD
    };
  }

  // 4Ô∏è‚É£ Meses espec√≠ficos por nome
  const monthNames = [
    "janeiro",
    "fevereiro",
    "mar√ßo",
    "abril",
    "maio",
    "junho",
    "julho",
    "agosto",
    "setembro",
    "outubro",
    "novembro",
    "dezembro",
  ];

  for (let i = 0; i < monthNames.length; i++) {
    if (periodLower.includes(monthNames[i])) {
      const yearMatch = periodLower.match(/\d{4}/);
      const year = yearMatch ? parseInt(yearMatch[0]) : now.getFullYear();

      // Criar data de in√≠cio: primeiro dia do m√™s
      const startDate = new Date(Date.UTC(year, i, 1));

      // Criar data de fim: √∫ltimo dia do m√™s
      const endDate = new Date(Date.UTC(year, i + 1, 0));

      return {
        start: startDate.toISOString().split("T")[0], // YYYY-MM-DD
        end: endDate.toISOString().split("T")[0], // YYYY-MM-DD
      };
    }
  }

  // 5Ô∏è‚É£ Ano espec√≠fico
  const yearMatch = periodLower.match(/\b(202[0-9])\b/);
  if (yearMatch) {
    const year = parseInt(yearMatch[1]);
    const startDate = new Date(Date.UTC(year, 0, 1));
    const endDate = new Date(Date.UTC(year, 11, 31));

    return {
      start: startDate.toISOString().split("T")[0], // YYYY-MM-DD
      end: endDate.toISOString().split("T")[0], // YYYY-MM-DD
    };
  }

  // 6Ô∏è‚É£ Fallback: sem filtro de data
  console.warn(
    `‚ö†Ô∏è Per√≠odo n√£o reconhecido: "${period}". Retornando sem filtro.`,
  );
  return {};
}
